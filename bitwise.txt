X	Y	X&Y	X|Y	X^Y
0	0	0	0	0
0	1	0	1	1
1	0	0	1	1
1	1	1	1	0


9. Embedded systems always require the user to manipulate bits in registers or variables.
 Given an integer variable a, write two code fragments. The first should set bit 3 of a.
 The second should clear bit 3 of a. In both cases, the remaining bits should be unmodified.
These are the three basic responses to this question:
(a) No idea. The interviewee cannot have done any embedded systems work.
(b) Use bit fields. Bit fields are right up there with trigraphs as the most brain-dead portion of C.
 Bit fields are inherently non-portable across compilers, and as such guarantee that your code is not reusable.
 I recently had the misfortune to look at a driver written by Infineon for one of their more complex communications chip. It used bit fields, and was completely useless because my compiler implemented the bit fields the other way around. The moral – never let a non-embedded person anywhere near a real piece of hardware! [3]
(c) Use #defines and bit masks. This is a highly portable method, and is the one that should be used.
My optimal solution to this problem would be:

#define BIT3 (0x1 << 3)
static int a;
void set_bit3(void) {
a |= BIT3;
}
void clear_bit3(void) {
a &= ~BIT3;
}

Some people prefer to define a mask, together with manifest constants for the set & clear values.
 This is also acceptable. The important elements that I’m looking for are the use of manifest constants,
 together with the |= and &= ~ constructs.

The bitwise OR of two numbers is just the sum of those two numbers if there is no carry involved,
 otherwise you just add their bitwise AND. Let’s say, we have a=5(101) and b=2(010),
 since there is no carry involved, their sum is just a|b. Now, if we change ‘a’ to 6 which is 110 in binary,
 their sum would change to a|b + a&b since there is a carry involved.

int izbroj_jedinice(int n) {
    int mask = 1;
    int retval = 0;
    while (n != 0) {
        if (n & mask) {
            retval++;
        }
        n = n >> 1;
    }
    return retval;
}

int check_bit(int n) {
    int mask1 = 1;
    mask1 = mask1 << 3;
    int mask2 = 1;
    mask2 = mask2 << 5;
    if ((n & mask1) && !(n & mask2)) {
        return 1;
    }
    return 0;
}

Here int num = -4;
which is num = -100 (in binary 0's and 1's)
~num = +011 (in binary 0's and 1's)
~num = 3