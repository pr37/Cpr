ne postoji prenosenje par po referenci u C u fju
-pokazivaci nisu zapravo po referenci, to je emuliranje

fji treba memorija za povratnu adresu,lokalne promenjive i privremeno skladistenje vrednosti

koliko nam steka treba: odredjujemo eksperimentalno(popunis stek istim vrednostima i pokrenes program i izracunas koliko je tih vrednosti ostalo)
) i analiticki (treba znati ceo graf poziva, rekurzije, prekidne rutine itd)

ova tri su ekvivalentna, ne krse pravilo da je prom u bloku koda vidljva samo tu

struct s * foo (struct s * res) {
    res->..=..
    return res;
}

struct s* foo () {
    static struct s * res;
    s->...
    return res;
}

struct s * foo () {
    struct s *  res  = malloc...
    res->..
    return res;
}



SORT:
#define swap(a,b) { a ^= b; b ^= a; a ^= b;}

void sort(int * niz, int len) {
    int step = 0;
    int i = 0;
    for (step = 0; step < len; step++) {
        for (i=0; i < len - step -1; i++) {
            if (niz[i] > niz[i+1]) {
                swap(niz[i],niz[i+1]);
            }
        }
    }

    for (i=0;i<len;i++) {
        printf(" %d ", niz[i]);
    }
}

signal pa napisi fju na osnovu tog signala, fibonacci, palindrom, setovanje bitova, lokalni min max niza, min max niza

int ispalindrom(char * str, int len) {
    int i,j;
    for(i=0,j=len-1;i< (len/2 -1); i++, j--) {
        printf("%c  %c \n", str[i], str[j]);
         if (str[i] != str[j]) {
                return 0;
            }
    }
    return 1;
}

int lokalnimin(int * niz,int len) {
    int i;
    for(i=0;i<len-1;i++) {
        if(niz[i] > niz[i+1] < niz[i+2]) {
            return niz[i+1];
        } else if (niz[0] < niz[1]) {
            return niz[0];
        } else if (niz[len-1] < niz[len-2]) {
            return niz[len-1];
        }
    }
    return -999;
}

int min(int * niz,int len) {
    int i;
    int temp = niz[0];
    for(i=0;i<len;i++) {
        if(temp > niz[i]) {
            temp = niz[i];
        }
    }
    return temp;
}

void fibonacci(int n1, int n2, int limit) {
    int next = n1+n2;
    printf(" %d ",next);
    if (next > limit) {
        return;
    }
    fibonacci(n2,next,limit);
}

#define set(a,pos) a |= (1 << pos)
void setujbit(int* x, int pos) {
    int mask = 1 << pos;
    *x = (*x) | mask;
}

void resetujbit(int* x, int pos) {
    int mask = ~(1 << pos);
    *x = (*x) & mask;
}


int32_t binarna_pretraga(int32_t * niz, int32_t len, int32_t trazeni) {
    int32_t pocetak = 0;
    int32_t kraj = len/2;
    while (1) {
        if (niz[kraj] == trazeni) {
            return kraj;
        }
        else if (niz[kraj] > trazeni) {
            //nova polovina
            kraj = kraj/2;
        } else {
            kraj = len - kraj/2;
        }
    }
}
